library(tidyverse)#
library(gaston)#
library(rrBLUP)#
#install.packages("lme4")#
library(lme4)#
#
#set working directory#
setwd("/Users/nico/Documents/GitHub/GWAS_2022/")#
#
###READ IN PHENOTYPE FILE, CLEAN COLUMN NAMES, COMBINE LOCATIONS#
#K22_pheno <- read.delim("data/Kin22-SunRils-T1-T30 Final.xlsx - 2022-05-12-11-55-18_Kin22-SunRi.csv", sep=",")#
K22_pheno <- read.delim("data/Kin22-SunRils-T1-T30.csv", sep=",")#
R22_pheno <- read.delim("data/R22-SunRil-T1-30.csv", sep=",")#
#clean up dataframes, rename columns#
header.true <- function(df) {#
  names(df) <- as.character(unlist(df[1,]))#
  df[-1,]#
}#
K22_pheno <- header.true(K22_pheno)#
names(K22_pheno)[14] <- "N_rust"#
#names(K22_pheno)[names(K22_pheno) == "Tray"] <- "Kin_tray"#
names(K22_pheno)[15] <- "G_rust"#
names(K22_pheno)[names(K22_pheno) == "WDR 3/7"] <- "WDR"#
#names(K22_pheno)[names(K22_pheno) == "flowering"] <- "Kin_flowering"#
names(K22_pheno)[names(K22_pheno) == "Powdery Mildew"] <- "Powdery_mildew"#
#names(R22_pheno)[names(R22_pheno) == "WDR"] <- "Ral_WDR"#
#names(R22_pheno)[names(R22_pheno) == "flowering"] <- "Ral_flowering"#
names(R22_pheno)[names(R22_pheno) == "Powdery.Mildew"] <- "Powdery_mildew"#
#names(R22_pheno)[names(R22_pheno) == "Tray"] <- "Ral_tray"#
names(R22_pheno)[names(R22_pheno) == "Plot_Id"] <- "Plot_ID"#
names(R22_pheno)[names(R22_pheno) == "Cross_Num"] <- "Cross_ID"#
names(R22_pheno)[names(R22_pheno) == "Cross_id"] <- "Cross"#
#names(R22_pheno)[names(R22_pheno) == "SNB"] <- "Ral_SNB"#
R22_pheno["Location"] <- "Raleigh"#
K22_pheno["Location"] <- "Kinston"#
#R22_pheno["Height"] <- 0#
R22_pheno <- R22_pheno[!(R22_pheno$Entry=="Barley"),]#
K22_pheno <- K22_pheno[!(K22_pheno$Entry=="Barley"),]#
K22_pheno$SNB <- ""#
#Combine phenotype files#
K22_pheno_subset <- K22_pheno[c("Cross_ID", "Entry", "Awns", "WDR", "flowering", "Powdery_mildew", "SNB", "Location", "Height")]#
R22_pheno_subset <- R22_pheno[c("Cross_ID", "Entry", "Awns", "WDR", "flowering", "Powdery_mildew", "SNB", "Location", "Height")]#
t_ph <- rbind(K22_pheno_subset, R22_pheno_subset)#
#CLEAN DATA/MISLABELLED LINES#
t_ph <- mutate(t_ph, Entry = if_else(Entry == "UX1994-6.4", "UX1994-64", Entry))#
t_ph <- mutate(t_ph, Entry = if_else(Entry == "UX2029-4.6", "UX2029-46", Entry))#
t_ph$Height <- as.numeric(t_ph$Height)#
#ADD COLUMN CONVERTING FLOWERING TIME FROM DATE TO DAYS#
days <- c()#
#for (i in length(t_ph$flowering)) {#
for (i in c(1:length(t_ph$flowering))) {#
	if (t_ph$Location[i] == "Kinston") {#
		a <- difftime(as.Date(t_ph$flowering[i], format="%m/%d/%Y"),ISOdate(2021,10,28))#
	} else {#
		a <- difftime(as.Date(t_ph$flowering[i], format="%m/%d/%Y"),ISOdate(2021,11,4))#
	}#
	days <- c(days, as.numeric(a) -.5)#
}#
t_ph$days_to_head <- days#
write.table(t_ph, file='output/all_phenotypes.tsv', quote=FALSE, sep='\t', row.names = FALSE)#
#
#Awn testing#
awn_vector <- ifelse(t_ph$Awns=="+", 1,0)#
t_ph$Awns <- awn_vector#
#
###READ IN IMPUTED VCF FILE, CLEAN UP DATA#
sunVCF <- read.vcf("data/SunRILs_2021_postimp_filt.vcf.gz", convert.chr = F)#
#filter out parents and thin on LD#
sunVCF <- select.inds(sunVCF, grepl("^UX", id))#
sunVCF <- LD.thin(sunVCF, threshold = .8)#
sunM <- as.matrix(sunVCF)#
#reformat ids to get rid of extra text#
sunVCF@ped$id <- gsub("-NWG", "", sunVCF@ped$id)#
sunVCF@ped$id <- gsub("-A+", "", sunVCF@ped$id)#
sunVCF@ped$id <- gsub("-NEG", "", sunVCF@ped$id)#
#filter for resequenced and duplicated lines#
sunVCF <- select.inds(sunVCF, !grepl("-A-", id))#
sunVCF <- select.inds(sunVCF, !duplicated(id))
genoCounts <- group_by(t_ph, Entry) %>% count()#
parLines <- filter(genoCounts, n > 10)$Entry#
single_crossLines <- filter(genoCounts, 1 == n)$Entry#
crossLines <- filter(genoCounts, n == 2 )$Entry#
multi_crossLines <- filter(genoCounts, 2 < n & 10 > n )$Entry #
#
#since we have 23 lines with more than 1 replicate at each location, we average them#
t_ph_group <- t_ph %>% group_by(Location, Cross_ID, Awns, Entry) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height))#
#filter out any unreplicated lines#
t_ph_group <- filter(t_ph_group, !(Entry %in% single_crossLines))#
t_ph_group <- as.data.frame(t_ph_group)#
#rownames(t_ph_group) <- t_ph_group$Entry#
###SYNCING UP GENOTYPE AND PHENOTYPE DATA#
#process to sync up phenotype and genotype files#
sunVCF_sync <- select.inds(sunVCF, id %in% t_ph_group$Entry)#
t_ph_group <- filter(t_ph_group, Entry %in% sunVCF_sync@ped$id)#
#
###CREATE BASIC MODEL FOR MANHATTAN PLOT#
plot_df <- data.frame(id = character(), p = numeric())#
test_pheno <- t_ph_group
i <- 3
a <- as.matrix(sunVCF_sync[,i])
b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	test_pheno <- merge(test_pheno,b)
marker_model <- lmer(Height ~ Marker + (1|Location) + (1|Cross_ID), data = test_pheno)
head(marker_model)
summary(marker_model)
anova(marker_model)
summary(anova(marker_model))
summary(aov(marker_model))
aov(marker_model)
summary(marker_model)
anova(marker_model)
summary(marker_model)[[1]]
summary(marker_model)["Fixed effects"]
summary(marker_model)[["Fixed effects"]]
head(test_pheno)
t_ph
head(t_ph)
length(t_ph$Entry)
length(t_ph_group$Entry)
t_ph_group <- t_ph %>% group_by(Location, Cross_ID, Awns, Entry) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height))
length(t_ph_group$Entry)
t_ph_group <- t_ph %>% ungroup()
length(t_ph_group$Entry)
t_ph_group <- t_ph %>% group_by(Location, Cross_ID, Awns, Entry) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height)) %>% ungroup()
length(t_ph_group$Entry)
t_ph_group <- t_ph %>% group_by(Location, Entry, Cross_ID, Awns) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height)) %>% ungroup()
length(t_ph_group$Entry)
head(t_ph_group)
t_ph_group <- t_ph %>% group_by(Location, Entry, Cross_ID) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height), Awns = mean(Awns)) %>% ungroup()
head(t_ph_group)
length(t_ph_group$Entry)
genoCounts <- group_by(t_ph, Entry) %>% count()
parLines <- filter(genoCounts, n > 10)$Entry
single_crossLines <- filter(genoCounts, 1 == n)$Entry
crossLines <- filter(genoCounts, n == 2 )$Entry
multi_crossLines <- filter(genoCounts, 2 < n & 10 > n )$Entry
genoCounts
parLines
single_crossLines
length(crossLines)
multi_crossLines
length(t_ph)
length(t_p$Entry)
length(t_ph$Entry)
length(t_ph_group$Entry)
59*13
genoCounts <- group_by(t_ph, Entry) %>% count() %>% ungroup()
t_ph_group <- t_ph %>% group_by(Location, Entry, Cross_ID) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height), Awns = mean(Awns)) %>% ungroup()
t_ph_group <- filter(t_ph_group, !(Entry %in% single_crossLines))
t_ph_group <- as.data.frame(t_ph_group)
sunVCF_sync <- select.inds(sunVCF, id %in% t_ph_group$Entry)
t_ph_group <- filter(t_ph_group, Entry %in% sunVCF_sync@ped$id)
plot_df <- data.frame(id = character(), p = numeric())#
test_pheno <- t_ph_group
length(t_ph_group)
length(t_ph_group$Entry)
length(unique(t_ph_group$Entry))
length(unique(t_ph_group$Cross_ID))
group_by(t_ph_group, Cross_ID) %>% count() %>% ungroup()
i <- 3
a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	test_pheno <- merge(test_pheno,b)
marker_model <- lmer(Height ~ Marker + (1|Location) + (1|Cross_ID), data = test_pheno)
summary(aov(marker_model))
anova(marker_model)
summary(marker_model)
t_ph_group <- t_ph %>% group_by(Location, Entry, Cross_ID) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height), Awns = mean(Awns)) %>% ungroup() %>% mutate(loc_fam = Location, Cross_ID, sep="_")
head(t_ph_group)
t_ph_group <- t_ph %>% group_by(Location, Entry, Cross_ID) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height), Awns = mean(Awns)) %>% ungroup() %>% mutate(loc_fam == Location, Cross_ID, sep="_")
t_ph_group <- t_ph %>% group_by(Location, Entry, Cross_ID) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height), Awns = mean(Awns)) %>% ungroup() %>% mutate(loc_fam = paste(Location, Cross_ID, sep="_"))
head(t_ph_group)
t_ph_group <- filter(t_ph_group, !(Entry %in% single_crossLines))
t_ph_group <- as.data.frame(t_ph_group)
sunVCF_sync <- select.inds(sunVCF, id %in% t_ph_group$Entry)#
t_ph_group <- filter(t_ph_group, Entry %in% sunVCF_sync@ped$id)
a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	test_pheno <- merge(test_pheno,b)
head(t_ph_group)
length(t_ph_group$Entry)
a <- as.matrix(sunVCF_sync[,i])
head(a)
length(a[,1])
b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))
c <- colnames(a)
test_pheno <- merge(test_pheno,b)
help(merge)
test_pheno <- merge(test_pheno,b, by="Entry")
head(test_pheno)
test_pheno <- t_ph_group
head(test_pheno)
test_pheno <- merge(test_pheno,b)
head(test_pheno)
marker_model <- lmer(Height ~ Marker + (1|Location) + (1|Cross_ID), data = test_pheno)
marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)
anova(marker_model)
marker_model <- lmer(Height ~ Marker + (loc_fam), data = test_pheno)
head(marker_model)
summary(marker_model)
unique(test_pheno$Marker)
test_pheno <- t_ph_group
d <- merge(test_pheno,b)
plot_df <- data.frame(id = character(), p = numeric())
test_pheno <- t_ph_group
i <- 3
a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)
marker_model <- lm(data = d, Height ~ Marker + loc_fam)
summary(marker_model)
marker_model <- lm(data = d, Height ~ Marker + (Location*Cross_ID))
p_val <- summary(marker_model)#$coefficients["geno_data",4]
p_val
p_val <- summary(marker_model)$coefficients["geno_data",4]
p_val <- summary(marker_model)$coefficients["Marker",4]
p_val
marker_model <- lm(data = d, Height ~ Marker * (Location*Cross_ID))
p_val <- summary(marker_model)$coefficients["Marker",4]
p_val
summary(marker_model)
for (i in c(1:length(sunVCF_sync@snps$id))) {#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)#
	if (length(unique(unlist(geno_data[,1]))) > 1) {#
		marker_model <- lm(data = d, Height ~ Marker * (Location*Cross_ID))#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = colnames(geno_data), p = p_val))#
	}#
}#
manhattan_plot("Test", plot_df)
manhattan_plot <- function(graph_name, dataframe) {#
	dataframe$LOG <- -log10(dataframe$p)#
	dataframe$chr <- str_replace(str_replace(dataframe$id, "^S", ""), "_\\d*$", "")#
	dataframe$pos <- as.numeric(str_replace(dataframe$id, "^S\\d[ABD]_", ""))#
	dataframe$FDR <- p.adjust(dataframe$p, method = "fdr")#
	dataframe$bon <- p.adjust(dataframe$p, method = "bonferroni")#
	#plot out model#
	manhattan(dataframe, chrom.col = c("#659157", "#69A2B0", "#FFCAB1"), main = graph_name)#
	abline(h = 5.6, col = "#659157")#
}
for (i in c(1:length(sunVCF_sync@snps$id))) {#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)#
	if (length(unique(unlist(geno_data[,1]))) > 1) {#
		marker_model <- lm(data = d, Height ~ Marker * (Location*Cross_ID))#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = colnames(geno_data), p = p_val))#
	}#
}#
manhattan_plot("Test", plot_df)
head(plot_df)
for (i in c(1:length(sunVCF_sync@snps$id))) {#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)#
	if (length(unique(unlist(geno_data[,1]))) > 1) {#
		marker_model <- lm(data = d, Height ~ Marker * (Location*Cross_ID))#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))#
	}#
}#
manhattan_plot("Test", plot_df)
head(plot_df)
plot_df <- data.frame(id = character(), p = numeric())
head(plot_df)
i
i <- 3
i
a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)
c
d <- merge(test_pheno,b)
marker_model <- lm(data = d, Height ~ Marker * (Location*Cross_ID))
p_val <- summary(marker_model)$coefficients["Marker",4]
plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))
head(plot_df)
for (i in c(1:length(sunVCF_sync@snps$id))) {#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)#
	if (length(unique(unlist(d$Marker[,1]))) > 1) {#
		marker_model <- lm(data = d, Height ~ Marker * (Location*Cross_ID))#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))#
	}#
}
head(d)
head(d$Marker)
for (i in c(1:length(sunVCF_sync@snps$id))) {#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)#
	if (length(unique(d$Marker)) > 1) {#
		marker_model <- lm(data = d, Height ~ Marker * (Location*Cross_ID))#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))#
	}#
}
