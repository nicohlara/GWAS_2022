library(tidyverse)#
library(gaston)#
library(rrBLUP)#
#install.packages("lme4")#
library(lme4)#
#
#set working directory#
setwd("/Users/nico/Documents/GitHub/GWAS_2022/")#
#
###READ IN PHENOTYPE FILE, CLEAN COLUMN NAMES, COMBINE LOCATIONS#
#K22_pheno <- read.delim("data/Kin22-SunRils-T1-T30 Final.xlsx - 2022-05-12-11-55-18_Kin22-SunRi.csv", sep=",")#
K22_pheno <- read.delim("data/Kin22-SunRils-T1-T30.csv", sep=",")#
R22_pheno <- read.delim("data/R22-SunRil-T1-30.csv", sep=",")#
#clean up dataframes, rename columns#
header.true <- function(df) {#
  names(df) <- as.character(unlist(df[1,]))#
  df[-1,]#
}#
K22_pheno <- header.true(K22_pheno)#
names(K22_pheno)[14] <- "N_rust"#
#names(K22_pheno)[names(K22_pheno) == "Tray"] <- "Kin_tray"#
names(K22_pheno)[15] <- "G_rust"#
names(K22_pheno)[names(K22_pheno) == "WDR 3/7"] <- "WDR"#
#names(K22_pheno)[names(K22_pheno) == "flowering"] <- "Kin_flowering"#
names(K22_pheno)[names(K22_pheno) == "Powdery Mildew"] <- "Powdery_mildew"#
#names(R22_pheno)[names(R22_pheno) == "WDR"] <- "Ral_WDR"#
#names(R22_pheno)[names(R22_pheno) == "flowering"] <- "Ral_flowering"#
names(R22_pheno)[names(R22_pheno) == "Powdery.Mildew"] <- "Powdery_mildew"#
#names(R22_pheno)[names(R22_pheno) == "Tray"] <- "Ral_tray"#
names(R22_pheno)[names(R22_pheno) == "Plot_Id"] <- "Plot_ID"#
names(R22_pheno)[names(R22_pheno) == "Cross_Num"] <- "Cross_ID"#
names(R22_pheno)[names(R22_pheno) == "Cross_id"] <- "Cross"#
#names(R22_pheno)[names(R22_pheno) == "SNB"] <- "Ral_SNB"#
R22_pheno["Location"] <- "Raleigh"#
K22_pheno["Location"] <- "Kinston"#
#R22_pheno["Height"] <- 0#
R22_pheno <- R22_pheno[!(R22_pheno$Entry=="Barley"),]#
K22_pheno <- K22_pheno[!(K22_pheno$Entry=="Barley"),]#
K22_pheno$SNB <- ""#
#Combine phenotype files#
K22_pheno_subset <- K22_pheno[c("Cross_ID", "Entry", "Awns", "WDR", "flowering", "Powdery_mildew", "SNB", "Location", "Height")]#
R22_pheno_subset <- R22_pheno[c("Cross_ID", "Entry", "Awns", "WDR", "flowering", "Powdery_mildew", "SNB", "Location", "Height")]#
t_ph <- rbind(K22_pheno_subset, R22_pheno_subset)#
#CLEAN DATA/MISLABELLED LINES#
t_ph <- mutate(t_ph, Entry = if_else(Entry == "UX1994-6.4", "UX1994-64", Entry))#
t_ph <- mutate(t_ph, Entry = if_else(Entry == "UX2029-4.6", "UX2029-46", Entry))#
t_ph$Height <- as.numeric(t_ph$Height)#
#ADD COLUMN CONVERTING FLOWERING TIME FROM DATE TO DAYS#
days <- c()#
#for (i in length(t_ph$flowering)) {#
for (i in c(1:length(t_ph$flowering))) {#
	if (t_ph$Location[i] == "Kinston") {#
		a <- difftime(as.Date(t_ph$flowering[i], format="%m/%d/%Y"),ISOdate(2021,10,28))#
	} else {#
		a <- difftime(as.Date(t_ph$flowering[i], format="%m/%d/%Y"),ISOdate(2021,11,4))#
	}#
	days <- c(days, as.numeric(a) -.5)#
}#
t_ph$days_to_head <- days#
write.table(t_ph, file='output/all_phenotypes.tsv', quote=FALSE, sep='\t', row.names = FALSE)#
#
#Awn testing#
awn_vector <- ifelse(t_ph$Awns=="+", 1,0)#
t_ph$Awns <- awn_vector#
#
###READ IN IMPUTED VCF FILE, CLEAN UP DATA#
sunVCF <- read.vcf("data/SunRILs_2021_postimp_filt.vcf.gz", convert.chr = F)#
#filter out parents and thin on LD#
sunVCF <- select.inds(sunVCF, grepl("^UX", id))#
sunVCF <- LD.thin(sunVCF, threshold = .8)#
sunM <- as.matrix(sunVCF)#
#reformat ids to get rid of extra text#
sunVCF@ped$id <- gsub("-NWG", "", sunVCF@ped$id)#
sunVCF@ped$id <- gsub("-A+", "", sunVCF@ped$id)#
sunVCF@ped$id <- gsub("-NEG", "", sunVCF@ped$id)#
#filter for resequenced and duplicated lines#
sunVCF <- select.inds(sunVCF, !grepl("-A-", id))#
sunVCF <- select.inds(sunVCF, !duplicated(id))#
#
###CHECK DATA TO ENSURE RELATIVE NORMALITY#
#Phenotypic data#
hist(as.numeric(t_ph$WDR), main="Winter dormancy release 2022")#
hist(as.numeric(days), breaks = 40, main = "Flowering date 2022")#
hist(as.numeric(t_ph$Powdery_mildew), main="Powdery mildew 2022")#
hist(as.numeric(t_ph$SNB), main="Septoria nodorum blotch 2022")#
hist(t_ph$Height, main="Height")#
#location testing#
sum(t_ph$Location=="Kinston")#
sum(t_ph$Location=="Raleigh")#
#Perform ANOVA to look at variation in heading date#
anova(lm(data = t_ph, days_to_head ~ Location + Cross_ID + Location:Cross_ID))#
anova(lm(data = t_ph, Height ~ Location + Cross_ID + Location:Cross_ID))#
#Genotypic data#
#check family structure using heatmap#
sunMTest <- sunM[sample(c(1:nrow(sunM)), 1000), sample(c(1:ncol(sunM)), 5000)]#
sunGRMTest <- A.mat(sunMTest)#
heatmap(sunGRMTest, symm = T)#
###CLEAN UP PHENOTYPIC DATA FOR COMBINING WITH GENOTYPE#
#check for duplication and lack of replication#
genoCounts <- group_by(t_ph, Entry) %>% count() %>% ungroup()#
parLines <- filter(genoCounts, n > 10)$Entry#
single_crossLines <- filter(genoCounts, 1 == n)$Entry#
crossLines <- filter(genoCounts, n == 2 )$Entry#
multi_crossLines <- filter(genoCounts, 2 < n & 10 > n )$Entry #
#
#since we have 23 lines with more than 1 replicate at each location, we average them#
t_ph_group <- t_ph %>% group_by(Location, Entry, Cross_ID) %>% summarize(days_to_head = mean(days_to_head), Height = mean(Height), Awns = mean(Awns)) %>% ungroup() %>% mutate(loc_fam = paste(Location, Cross_ID, sep="_"))#
#filter out any unreplicated lines#
t_ph_group <- filter(t_ph_group, !(Entry %in% single_crossLines))#
t_ph_group <- as.data.frame(t_ph_group)#
#rownames(t_ph_group) <- t_ph_group$Entry#
###SYNCING UP GENOTYPE AND PHENOTYPE DATA#
#process to sync up phenotype and genotype files#
sunVCF_sync <- select.inds(sunVCF, id %in% t_ph_group$Entry)#
t_ph_group <- filter(t_ph_group, Entry %in% sunVCF_sync@ped$id)#
#
###CREATE BASIC MODEL FOR MANHATTAN PLOT#
plot_df <- data.frame(id = character(), p = numeric())#
test_pheno <- t_ph_group
head(plot_df)
head(test_pheno)
length(sunVCF_sync@snps$id)
dim(sunVCF_sync)
length(test_pheno$Entry)
621*2
for (i in c(1:100))) {#
	print(i)#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)#
	if (length(unique(d$Marker)) > 1) {#
		marker_model <- lm(data = d, Height ~ Marker) #* (Location + Cross_ID))#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		#marker_model <- lm(data = test_pheno, days_to_head ~ Marker * (Location + Cross_ID + Location:Cross_ID))#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))#
	}#
}
for (i in c(1:100)) {#
	print(i)#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)#
	if (length(unique(d$Marker)) > 1) {#
		marker_model <- lm(data = d, Height ~ Marker) #* (Location + Cross_ID))#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		#marker_model <- lm(data = test_pheno, days_to_head ~ Marker * (Location + Cross_ID + Location:Cross_ID))#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))#
	}#
}
head(plot_df)
plotdf
plot_df
for (i in c(1:100)) {#
	print(i)#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	d <- merge(test_pheno,b)#
	print(unique(d$Marker))#
	if (length(unique(d$Marker)) > 4) {#
		marker_model <- lm(data = d, Height ~ Marker) #* (Location + Cross_ID))#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		#marker_model <- lm(data = test_pheno, days_to_head ~ Marker * (Location + Cross_ID + Location:Cross_ID))#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))#
	}#
}
i <- 3
print(i)
a <- as.matrix(sunVCF_sync[,i])
b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))
c <- colnames(a)
d <- merge(test_pheno,b)
head(c)
head(b)
unique(b)
length(unique(b$Marker))
marker_model <- lm(data = d, Height ~ Marker) #* (Location + Cross_ID))
p_val <- summary(marker_model)$coefficients["Marker",4]
print(p_val)
marker_model
summary(marker_model)
marker_model <- lm(data = d, Height ~ Marker * (Location + Cross_ID))
p_val <- summary(marker_model)$coefficients["Marker",4]
print(p_val)
summary(marker_model)
head(test_pheno)
unique(test_pheno$Awns)
marker_model <- lm(data = d, Awns ~ Marker * (Location + Cross_ID))
marker_model <- lm(data = d, Awns ~ Marker * loc_fam)
head(marker_model)
marker_model
marker_model <- lm(data = d, Awns ~ Marker * (Location + Cross_ID))
marker_model
summary(marker_model)
matrix_df_fam <- data.frame()#
rand_cross_id <- sample(unique(t_ph_group$Cross_ID), length(unique(t_ph_group$Cross_ID))/2)#
matrix_df_fam <- filter(t_ph_group, (Cross_ID %in% rand_cross_id & Location == "Kinston") | (!(Cross_ID %in% rand_cross_id) & (Location == "Raleigh")))#
rownames(matrix_df_fam) <- matrix_df_fam$Entry#
#hist(t_ph_group$days_to_head)#
###MAKE AND SHOW MODELS#
#make covariate model#
#familyLocCov <- model.matrix(~ Location + Entry, t_ph_group)#
#familyLocCov <- model.matrix(~gsub("-\\d*$", "", t_ph_group$Entry) + t_ph_group$Location)#
#testGWAS <- association.test(sunVCF_sync, t_ph_group$days_to_head, X = familyLocCov)#
###USING RANDOMLY FILTERED INDIVIDUAL MODEL#
familyLocCov <- model.matrix(~ Location + Entry, matrix_df_ind)#
familyLocCov <- model.matrix(~gsub("-\\d*$", "", matrix_df_ind$Entry) + matrix_df_ind$Location)#
testGWAS_ind <- association.test(sunVCF_sync, matrix_df_ind$days_to_head, X = familyLocCov)
matrix_df_ind <- data.frame()#
#matrix by individual IN family, works better than by family#
for (i in unique(t_ph_group$Cross_ID)) {#
	a <- filter(t_ph_group, Cross_ID == i)#
	b <- sample(unique(a$Entry), length(unique(a$Entry))/2)#
	df <- filter(a, (Entry %in% b & Location == "Kinston") | (!(Entry %in% b) & !(Location == "Kinston")))#
	matrix_df_ind <- rbind(matrix_df_ind, df)#
}
familyLocCov <- model.matrix(~ Location + Entry, matrix_df_ind)
familyLocCov <- model.matrix(~gsub("-\\d*$", "", matrix_df_ind$Entry) + matrix_df_ind$Location)
testGWAS_ind <- association.test(sunVCF_sync, matrix_df_ind$days_to_head, X = familyLocCov)
testGWAS_ind
head(testGWAS_ind)
help(association.test)
help(lm)
summary(marker_model)
marker_model <- lm(data = d, Awns ~ Marker + Cross_ID)
summary(marker_model)
marker_model$F-statistic
marker_model$Fstatistic
marker_model$Fstatistic[1]
marker_model$fstatistic[1]
marker_model$fstatistic
summary(marker_model)$fstatistic
pf(x$fstatistic[1],x$fstatistic[2],x$fstatistic[3],lower.tail=FALSE)
x <- summary(marker_model)
pf(x$fstatistic[1],x$fstatistic[2],x$fstatistic[3],lower.tail=FALSE)
x
x$fstatistic[4]
x$fstatistic[3]
pf(x$fstatistic[1],x$fstatistic[2],x$fstatistic[3])
x$fstatistic[2]
pf(x$fstatistic[1],x$fstatistic[2],x$fstatistic[3])
pf(x$fstatistic[1],x$fstatistic[2],x$fstatistic[3], lower.tail=FALSE)
p_val <- summary(marker_model) %>% pf(fstatistic[1],fstatistic[2],fstatistic[3], lower.tail=FALSE)
-log(0)
-log(2e-16)
-log(2.2e-16)
#for (i in c(1:length(sunVCF_sync@snps$id))) {#
for (i in c(1000:1100)) {#
	print(i)#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	if (length(unique(b$Marker)) > 1) {#
		d <- merge(test_pheno,b)#
		marker_model <- lm(data = d, Awns ~ Marker + Cross_ID)#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		#marker_model <- lm(data = test_pheno, days_to_head ~ Marker * (Location + Cross_ID + Location:Cross_ID))#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		print(p_val)#
		#summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))#
	}#
}
plot_df
summary(aov(marker_model))
for (i in c(1000:2000)) {#
	print(i)#
	a <- as.matrix(sunVCF_sync[,i])#
	b <- data.frame(Entry = a[,0], Marker = as.vector(a[,1]))#
	c <- colnames(a)#
	if (length(unique(b$Marker)) > 1) {#
		d <- merge(test_pheno,b)#
		marker_model <- lm(data = d, Awns ~ Marker + Cross_ID)#
		#marker_model <- lmer(Height ~ Marker + (1|loc_fam), data = test_pheno)#
		p_val <- summary(marker_model)$coefficients["Marker",4]#
		print(p_val)#
		summary(aov(marker_model))#
		plot_df <- rbind(plot_df, data.frame(id = c, p = p_val))#
	}#
}
